[push]
	default = simple
[include]
	path = ~/.private/.gitconfig
[core]
	editor = code --wait --new-window
	pager = less -x4
	excludesFile = ~/.gitexcludes
[filter "lfs"]
	clean = git-lfs clean -- %f
	smudge = git-lfs smudge -- %f
	process = git-lfs filter-process
	required = true
[color]
	ui = auto
[diff]
	# tool = diffmerge
	tool = meld
[difftool]
	prompt = false
[difftool "diffmerge"]
	cmd = diffmerge \"$LOCAL\" \"$REMOTE\"
[difftool "meld"]
  trustExitCode = true
  cmd = meld \"$LOCAL\" \"$REMOTE\"
[merge]
	# tool = diffmerge
	tool = meld
[mergetool]
	prompt = false
[mergetool "diffmerge"]
	cmd = "diffmerge --merge --result=\"$MERGED\" \"$LOCAL\" \"$(if test -f \"$BASE\"; then echo \"$BASE\"; else echo \"$LOCAL\"; fi)\" \"$REMOTE\""
	trustExitCode = true
[mergetool "meld"]
  trustExitCode = true
  cmd = meld --auto-merge \"$LOCAL\" \"$BASE\" \"$REMOTE\" --output=\"$MERGED\"
[alias]
	br = for-each-ref --sort=committerdate refs/heads/ --format='%(HEAD) %(color:yellow)%(refname:short)%(color:reset) | %(color:red)%(objectname:short)%(color:reset) - %(contents:subject) | %(color:magenta)%(authorname)%(color:reset) | (%(color:green)%(committerdate:relative)%(color:reset))' 
	unstage = reset HEAD
	amend = commit -a --amend
	undo = reset HEAD~1 --mixed
	undo-commit = reset --soft HEAD^
	poh = push origin HEAD
	pulloh = pull origin HEAD
	set-upstream = !git branch --set-upstream-to=origin/`git symbolic-ref --short HEAD`
	st = status 
	co = checkout
	ci = commit
	df = diff
	lg = log -p
	rso = remote show origin
	me = config user.email

	up = !git update
	smash = !git ir

	trackall = "!git branch -r | grep -v HEAD | grep -v $(git branch-name) | while read remote; do git branch --track ${remote#origin/} $remote; done"

	# show the first branch ever 	
	root = !git reflog show --all | grep refs/heads | grep -v HEAD | tail -1 | awk -F@ '{print $1}' | awk -F/ '{print $NF}'

	# interactive rebase
	rb = !sh -c 'git rebase ${1-$(git root)}' -
	ir = !sh -c 'git rebase -i ${1-$(git root)}' -

	# all commits since root
	log-branch = !git log $(git root)..
	blog = !git log-branch

	# all commits by me
	mlog = !git log --committer=\"`git me`\"

	# update current branch
	update = !sh -c 'git fetch origin && git rebase -p ${1-$(git root)}' -

	# creates a diff of current branch against supplied branch, usage: git export-branch [refbranch]
	branch-name = !git for-each-ref --format='%(refname:short)' `git symbolic-ref HEAD`
	export-branch = !git format-patch --stdout $1 > ~/branches/`git branch-name`.diff

	# all commits that aren't merges on all branches
	all = !git log --pretty=oneline --abbrev-commit --all --no-merges

	# all commits today for only me
	today = !git all --since='12am' --committer=\"`git me`\"

	# today's commits without formatting or paging
	today-text = !git --no-pager today --no-color

	# files different from master/main on current branch
	fdm = !git diff $(git root)... --name-status

	# last commit info in svn style
	last = !git show --name-status
	last-files = !git last --pretty=format:""

	# last commit only certain type of modification
	mlast = !git last-files | awk 'match($1, /M/) {print $2}'
	alast = !git last-files | awk 'match($1, /A/) {print $2}'
	dlast = !git last-files | awk 'match($1, /D/) {print $2}'

	# `git done`
	# current branch: merge, push, non-forced delete branch, show info
	done = !sh -c '~/bin/done -d $1' -

	# `git spawn my-new-branch`
	# make new branch based on master/main no matter which branch is checked out
	spawn = !sh -c 'git checkout -b $1 ${2-$(git root)} && git config branch.$1.localmerge ${2-$(git root)}' - 

	# `git nuke my-old-branch`
	# (Checks out master/main and does a non-forced delete on the branch entered)
	nuke = !git co $(git root) && sh -c 'git branch -D $1'

	# `git sync`
	# update current branch and master/main
	sync = !git update && \
		git co $(git root) && \
		git pull && \
		git co @{-1} 

	# `git save`
	# saves a commit in current branch: local branches you will be rebasing
	save = !git commit -am \"save game\"

	# attempt to cleanup some common problems
	unfuck = !git fsck && git remote prune origin && git gc

	# find the top level of current repository
	top = !git rev-parse --show-toplevel

	# list files changed by last commit in absolute location
	list = !git show --pretty=format:"" --name-only | sed '/^$/d' | sed \"s|^|`git top`/|g\"

	# give a count of dirty files
	dirty = !git status --porcelain -uno | wc -l

	# number of non-merge commits 
	peeps = !git log --pretty=format:"%Cblue%aN%Creset" --no-merges | sort | uniq -c | sort -rn
	mergers = !git log --pretty=format:"%Cred%aN%Creset" --merges | sort | uniq -c | sort -rn

	desc = !git describe --tags --dirty --always

	# awesome placeholders
	crunk = status
	deploy = status
	crazy = status
	stupid = status
[credential]
	helper = osxkeychain
[pull]
	ff = only
[init]
	defaultBranch = main
